
Photograph your local culture, help Wikipedia and win!Свернуть
JavaScript
Материал из Википедии — свободной энциклопедии
(перенаправлено с «JS»)
Текущая версия страницы пока не проверялась опытными участниками и может значительно отличаться от версии, проверенной 11 мая 2022 года; проверки требуют 30 правок.
Перейти к навигацииПерейти к поиску
Не следует путать с Java.
Не следует путать с JScript.
JavaScript
Изображение логотипа
Класс языка	
мультипарадигмальный: объектно-ориентированное (прототипное), обобщённое, функциональное, императивное, аспектно-ориентированное,

событийно-ориентированное программирование
Тип исполнения	интерпретация, трансляция в байт-код Java[1], JIT в машинные коды[2]
Появился в	1995
Автор	Брендан Эйх
Расширение файлов	.js, .cjs, .mjs[Спецификация 1]
Выпуск	ECMAScript 2022[3] (июнь 2022; 8 месяцев назад)
Система типов	динамическая, утиная
Основные реализации	SpiderMonkey, Rhino, KJS (JavaScript)[en], JavaScriptCore, V8
Испытал влияние	Lua, Self[4], Си, Scheme[4], Perl[4], Python, Java[4], AWK[4], HyperTalk[4]
Повлиял на	Objective-J, Dart, TypeScript
Логотип Викисклада Медиафайлы на Викискладе
JavaScript
Изображение логотипа
JavaScript screenshot.png
Crystal source.svg
Расширение	.js[7]
MIME-тип	text/javascript, application/javascript[5][6]
Опубликован	сентябрь 1995[8]
Тип формата	текстовый файл с исходным кодом
Расширен из	ECMAScript
Логотип Викисклада Медиафайлы на Викискладе
JavaScript (/ˈdʒɑːvɑːˌskrɪpt/; аббр. JS /ˈdʒeɪ.ɛs./) — мультипарадигменный язык программирования. Поддерживает объектно-ориентированный, императивный и функциональный стили. Является реализацией спецификации ECMAScript (стандарт ECMA-262[9]).

JavaScript обычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам[10].

Основные архитектурные черты: динамическая типизация, слабая типизация, автоматическое управление памятью, прототипное программирование, функции как объекты первого класса.

На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке[~ 1][11].

Название «JavaScript» является зарегистрированным товарным знаком корпорации Oracle в США[12].

В 1992 году компания Nombas (впоследствии приобретённая Openwave[en]) начала разработку встраиваемого скриптового языка Cmm (Си-минус-минус), который, по замыслу разработчиков, должен был стать достаточно мощным, чтобы заменить макросы, сохраняя при этом схожесть с Си, чтобы разработчикам не составляло труда изучить его[13]. Главным отличием от Си была работа с памятью. В новом языке всё управление памятью осуществлялось автоматически: не было необходимости создавать буфера, объявлять переменные, осуществлять преобразование типов. В остальном языки сильно походили друг на друга: в частности, Cmm поддерживал стандартные функции и операторы Си[14]. Cmm был переименован в ScriptEase, поскольку исходное название звучало слишком негативно, а упоминание в нём Си «отпугивало» людей[13][15]. На основе этого языка был создан проприетарный продукт CEnvi. В конце ноября 1995 года Nombas разработала версию CEnvi, внедряемую в веб-страницы. Страницы, которые можно было изменять с помощью скриптового языка, получили название Espresso Pages — они демонстрировали использование скриптового языка для создания игры, проверки пользовательского ввода в формы и создания анимации. Espresso Pages позиционировались как демоверсия, призванная помочь представить, что случится, если в браузер будет внедрён язык Cmm. Работали они только в 16-битовом Netscape Navigator под управлением Windows[16].

Самая первая реализация JavaScript была создана Бренданом Эйхом (англ. Brendan Eich) в компании Netscape, и с тех пор обновляется, чтобы соответствовать ECMA-262 Edition 5 и более поздним версиям. Этот движок называется SpiderMonkey и реализован на языке C/C++. Движок Rhino создан Норрисом Бойдом (англ. Norris Boyd) и реализован на языке Java. Как и SpiderMonkey, Rhino соответствует ECMA-262 Edition 5.


Содержание
1	JavaScript
2	Популярность
3	Возможности языка
4	Семантика и синтаксис
4.1	Структура языка
4.1.1	Ядро
4.1.2	Объектная модель браузера
4.1.3	Объектная модель документа
4.2	Встраивание в веб-страницы
4.2.1	Расположение внутри страницы
4.2.2	Расположение внутри тега
4.2.3	Вынесение в отдельный файл
4.2.4	Атрибуты элемента script
5	Область применения
5.1	Веб-приложения
5.1.1	AJAX
5.1.2	Comet
5.1.3	Браузерные операционные системы
5.2	Букмарклеты
5.3	Пользовательские скрипты в браузере
5.4	Серверные приложения
5.5	Мобильные приложения
5.6	Виджеты
5.7	Прикладное программное обеспечение
5.8	Манипуляция объектами приложений
5.9	Офисные приложения
5.9.1	Microsoft Office
5.9.2	OpenOffice.org
5.10	Обучение информатике
6	Версии
7	Библиотеки JavaScript
8	Отладка
9	Средства тестирования
10	Связь с другими языками
10.1	Взаимное влияние
10.1.1	JavaScript и Java
10.2	Реализация
10.3	Взаимодействие
11	Поддержка браузерами
11.1	Наборы тестов
11.2	Безопасность
11.2.1	Межсайтовые уязвимости
11.2.2	Неуместное доверие на стороне клиента
11.2.3	Ошибки в браузере, плагинах и расширениях
11.2.4	Ошибки реализации песочницы
12	Литература
13	См. также
14	Примечания
14.1	Спецификации
14.2	Комментарии
15	Ссылки
15.1	Документация
15.2	Справочники
15.3	Тематические ресурсы
15.4	Блоги известных авторов книг по JavaScript
JavaScript

Брендан Эйх[17]
Перед Бренданом Эйхом, нанятым в компанию Netscape 4 апреля 1995 года[18], была поставлена задача внедрить язык программирования Scheme или что-то похожее в браузер Netscape. Поскольку требования были размыты, Эйха перевели в группу, ответственную за серверные продукты, где он проработал месяц, занимаясь улучшением протокола HTTP[18]. В мае разработчик был переброшен обратно, в команду, занимающуюся клиентской частью (браузером), где он немедленно начал разрабатывать концепцию нового языка программирования. Менеджмент разработки браузера, включая Тома Пакина (англ. Tom Paquin), Михаэля Тоя[en], Рика Шелла (англ. Rick Schell), был убеждён, что Netscape должен поддерживать язык программирования, встраиваемый в HTML-код страницы[19].


Марк Андрессен

Билл Джой
Помимо Брендана Эйха, в разработке участвовали[18] сооснователь[20] Netscape Communications Марк Андрессен и сооснователь Sun Microsystems Билл Джой: чтобы успеть закончить работы над языком к релизу браузера, компании заключили соглашение о сотрудничестве в разработке[21]. Они ставили перед собой цель обеспечить «язык для склеивания» составляющих частей веб-ресурса: изображений, плагинов, Java-апплетов, который был бы удобен для веб-дизайнеров и программистов, не обладающих высокой квалификацией[18].

Первоначально по предложению Марка Андрессена[22] язык был назван Mocha[23][24][25], был реализован Бренданом Эйхом в течение десяти дней и впервые был включен в пре-альфу версию Netscape 2[22]. Затем он был переименован в LiveScript[25][26] и предназначался как для программирования на стороне клиента, так и для программирования на стороне сервера (там он должен был называться LiveWire)[21]. На синтаксис оказали влияние языки Си и Java, и, поскольку Java в то время было модным словом[18][21], 4 декабря 1995 года LiveScript переименовали в JavaScript[27], получив соответствующую лицензию у Sun. Анонс JavaScript со стороны представителей Netscape и Sun состоялся накануне выпуска второй бета-версии Netscape Navigator[18]. В нём декларируется, что 28 лидирующих ИТ-компаний выразили намерение использовать в своих будущих продуктах JavaScript как объектный скриптовый язык с открытым стандартом[28].

В 1996 году компания Microsoft выпустила аналог языка JavaScript, названный JScript. Анонсирован этот язык был 18 июля 1996 года[29]. Первым браузером, поддерживающим эту реализацию, был Internet Explorer 3.0.

По инициативе компании Netscape[30][31] была проведена стандартизация языка ассоциацией ECMA. Стандартизированная версия имеет название ECMAScript, описывается стандартом ECMA-262. Первой версии спецификации соответствовал JavaScript версии 1.1, а также языки JScript и ScriptEasy[13][21].

Популярность
В статье «The World’s Most Misunderstood Programming Language Has Become the World’s Most Popular Programming Language»[32] (с англ. — «Самый неправильно понятый язык программирования в мире стал самым популярным в мире языком программирования») Дуглас Крокфорд утверждает, что лидирующую позицию JavaScript занял в связи с развитием AJAX, поскольку браузер стал превалирующей системой доставки приложений. Он также констатирует растущую популярность JavaScript, то, что этот язык встраивается в приложения, отмечает значимость языка.

Согласно TIOBE Index, базирующемуся на данных поисковых систем Google, MSN, Yahoo!, Википедия и YouTube, в апреле 2015 года JavaScript находился на 6-м месте (год назад — на 9-м)[33].

По данным Black Duck Software[en][34], в разработке открытого программного обеспечения доля использования JavaScript росла. 36 % проектов, выпуски которых состоялись с августа 2008 по август 2009 года, включают JavaScript, наиболее часто используемый язык программирования с быстрорастущей популярностью. 80 % открытого программного обеспечения использует Си, C++, Java, Shell и JavaScript. При этом JavaScript — единственный из этих языков, чья доля использования увеличилась (более чем на 2 процента, если считать в строках кода)[35].

JavaScript является самым популярным языком программирования, используемым для разработки веб-приложений на стороне клиента[en][36][37].

Возможности языка
JavaScript является объектно-ориентированным языком, но используемое в языке прототипирование[38][39] обуславливает отличия в работе с объектами по сравнению с традиционными класс-ориентированными языками. Кроме того, JavaScript имеет ряд свойств, присущих функциональным языкам — функции как объекты первого класса, объекты как списки, карринг, анонимные функции, замыкания[40] — что придаёт языку дополнительную гибкость.

Несмотря на схожий с Си синтаксис, JavaScript по сравнению с языком Си имеет коренные отличия:

объекты с возможностью интроспекции;
функции как объекты первого класса;
автоматическое приведение типов;
автоматическая сборка мусора;
анонимные функции.
В языке отсутствуют такие полезные вещи[41], как:

стандартная библиотека: в частности, отсутствует интерфейс программирования приложений по работе с файловой системой, управлению потоками ввода-вывода, базовых типов для бинарных данных;
стандартные интерфейсы к веб-серверам и базам данных;
система управления пакетами[~ 2], которая бы отслеживала зависимости и автоматически устанавливала их.
Семантика и синтаксис
Синтаксис языка JavaScript во многом напоминает синтаксис Си и Java, семантически же язык гораздо ближе к Self, Smalltalk или даже Лиспу[32][42][Спецификация 2].

В JavaScript:

все идентификаторы регистрозависимы,
в названиях переменных можно использовать буквы, подчёркивание, символ доллара, арабские цифры,
названия переменных не могут начинаться с цифры,
для оформления однострочных комментариев используются //, многострочные и внутристрочные комментарии начинаются с /* и заканчиваются */.
Структура языка
Структурно JavaScript можно представить в виде объединения трёх чётко различимых друг от друга частей[43][44][45][46]:

ядро (ECMAScript),
объектная модель браузера (Browser Object Model или BOM[en]),
объектная модель документа (Document Object Model или DOM).
Если рассматривать JavaScript в отличных от браузера окружениях, то объектная модель браузера и объектная модель документа могут не поддерживаться[45].

Объектную модель документа иногда рассматривают как отдельную от JavaScript сущность[47][48][Спецификация 3], что согласуется с определением DOM как независимого от языка интерфейса документа[49][~ 3]. В противоположность этому ряд авторов находит BOM и DOM тесно взаимосвязанными[50][51].

Ядро
Основная статья: ECMAScript
ECMAScript не является браузерным языком и в нём не определяются методы ввода и вывода информации[43]. Это, скорее, основа для построения скриптовых языков. Спецификация ECMAScript описывает типы данных, инструкции, ключевые и зарезервированные слова, операторы, объекты, регулярные выражения, не ограничивая авторов производных языков в расширении их новыми составляющими.

Объектная модель браузера
Объектная модель браузера — браузер-специфичная часть языка[45][52], являющаяся прослойкой между ядром и объектной моделью документа[53]. Основное предназначение объектной модели браузера — управление окнами браузера и обеспечение их взаимодействия. Каждое из окон браузера представляется объектом window, центральным объектом DOM. Объектная модель браузера на данный момент не стандартизирована[45][54], однако спецификация находится в разработке WHATWG[53][Спецификация 4] и W3C[44][Спецификация 5].

Помимо управления окнами, в рамках объектной модели браузера, браузерами обычно обеспечивается поддержка следующих сущностей[53][54]:

управление фреймами,
поддержка задержки в исполнении кода и зацикливания с задержкой,
системные диалоги,
управление адресом открытой страницы,
управление информацией о браузере,
управление информацией о параметрах монитора,
ограниченное управление историей просмотра страниц,
поддержка работы с HTTP cookie.
Объектная модель документа
Основная статья: Document Object Model
Объектная модель документа — интерфейс программирования приложений для HTML и XML-документов[55]. Согласно DOM, документ (например, веб-страница) может быть представлен в виде дерева объектов, обладающих рядом свойств, которые позволяют производить с ним различные манипуляции:

генерация и добавление узлов,
получение узлов,
изменение узлов,
изменение связей между узлами,
удаление узлов.
Встраивание в веб-страницы
Расположение внутри страницы
Для добавления JavaScript-кода на страницу можно использовать теги <script></script>[Спецификация 6], которые рекомендуется, но не обязательно, помещать внутри контейнера <head>. Контейнеров <script> в одном документе может быть сколько угодно. Атрибут type="text/javascript" указывать необязательно, данное значение используется по умолчанию[56].

Скрипт, выводящий модальное окно с классической надписью «Hello, World!» внутри браузера:

<script type="application/javascript">
  alert('Hello, World!');
</script>

Расположение внутри тега
Спецификация HTML описывает набор атрибутов, используемых для задания обработчиков событий[Спецификация 7]. Пример использования:

<a href="delete.php" onclick="confirm('Вы уверены?'); return false;">
  Удалить
</a>
В приведённом примере при нажатии на ссылку функция confirm('Вы уверены?'); вызывает модальное окно с надписью «Вы уверены?», а return false; блокирует переход по ссылке. Разумеется, этот код будет работать только если в браузере есть и включена поддержка JavaScript, иначе переход по ссылке произойдёт без предупреждения.

Использование кода JavaScript в контексте разметки страницы расценивается в рамках ненавязчивого JavaScript как плохая практика. Аналогом (при условии снабжения ссылки идентификатором alertLink)

<a id="alertLink">
  Удалить
</a>
приведённого примера может являться, например, следующий фрагмент JavaScript:

window.onload = () => {
    const linkWithAlert = document.getElementById('alertLink');
    linkWithAlert.addEventListener('click', async () => {
      if (confirm('Вы уверены?')) {
        await fetch('delete', {method: 'DELETE'})
      }
    })
};
Вынесение в отдельный файл
Есть и третья возможность подключения JavaScript — написать скрипт в отдельном файле, а потом подключить его с помощью конструкции

<body>
  <script type="application/javascript" src="http://Путь_к_файлу_со_скриптом">
  </script>
</body>
Атрибуты элемента script
Элемент script, широко используемый для подключения к странице JavaScript, имеет несколько атрибутов.

необязательный[Спецификация 8] атрибут type для указания MIME-типа содержимого.
В рабочем предложении RFC-4329, определяющем[57] MIME-тип, соответствующий JavaScript, указано:

[5]

Медиатипы

application/javascript,
application/ecmascript,
которые также определяются в этом документе, предназначены для практического использования, им следует отдавать предпочтение.

Оригинальный текст (англ.)[показать]
необязательный атрибут src, принимающий в качестве значения адрес к файлу со скриптом.
необязательный атрибут charset, используемый вместе с src для указания используемой кодировки внешнего файла.
необязательный атрибут defer указывает, что получение скрипта происходит асинхронно, но выполнение следует отложить до тех пор, пока страница не будет загружена целиком.
необязательный атрибут async указывает, что получение скрипта происходит асинхронно, а выполнение будет произведено сразу по завершении скачивания. Очерёдность выполнения скриптов не гарантируется.
При этом атрибут language (language="JavaScript"), несмотря на его активное использование (в 2008 году этот атрибут был наиболее часто используемым у тега <script>[58]), относится к не рекомендуемым (deprecated), отсутствует в DTD, поэтому считается некорректным[59].

Область применения
Веб-приложения
Основная статья: Веб-приложение
JavaScript используется в клиентской части веб-приложений: клиент-серверных программ, в котором клиентом является браузер, а сервером — веб-сервер, имеющих распределённую между сервером и клиентом логику. Обмен информацией в веб-приложениях происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются кроссплатформенными сервисами.

AJAX
Основная статья: AJAX
В родственных проектах

Книги в Викиучебнике

Медиафайлы на Викискладе
JavaScript используется в AJAX, популярном подходе к построению интерактивных пользовательских интерфейсов веб-приложений, заключающемся в «фоновом» асинхронном обмене данными браузера с веб-сервером. В результате, при обновлении данных веб-страница не перезагружается полностью и интерфейс веб-приложения становится быстрее, чем это происходит при традиционном подходе (без применения AJAX).

Comet
Основная статья: Comet (программирование)
Comet — широкое понятие, описывающее механизм работы веб-приложений, использующих постоянные HTTP-соединения, что позволяет веб-серверу отправлять данные браузеру без дополнительного запроса со стороны браузера. Для таких приложений используются технологии, непосредственно поддерживаемые браузерами. В частности, в них широко используется JavaScript.

Браузерные операционные системы
Основная статья: WebOS

Пример сеанса eyeOS
JavaScript широко используется в браузерных операционных системах. Так, например, исходный код IndraDesktop WebOS на 75 % состоит из JavaScript, код браузерной операционной системы IntOS — на 70 %. Доля JavaScript в исходном коде eyeOS — 5 %, однако и в рамках этой операционной системы JavaScript играет важную роль, участвуя в визуализации на клиенте и являясь необходимым механизмом для коммуницирования клиента и сервера[60].

Букмарклеты
Основная статья: Букмарклет
JavaScript используется для создания небольших программ, размещаемых в закладки браузера. При этом используются URL-адреса со спецификатором javascript:[61].

Пользовательские скрипты в браузере
Пользовательские скрипты в браузере — это программы, написанные на JavaScript, выполняемые в браузере пользователя при загрузке страницы. Они позволяют автоматически заполнять формы, переформатировать страницы, скрывать нежелательное содержимое и встраивать желательное для отображения содержимое, изменять поведение клиентской части веб-приложений, добавлять элементы управления на страницу и т. д.

Для управления пользовательскими скриптами в Mozilla Firefox используется расширение Greasemonkey; Opera[62][63][64] и Google Chrome[65] предоставляют средства поддержки пользовательских скриптов и возможности для выполнения ряда скриптов Greasemonkey.

Серверные приложения
Приложения, написанные на JavaScript, могут исполняться на серверах, использующих Java 6 и более поздних версий[66]. Это обстоятельство используется для построения серверных приложений, позволяющих обрабатывать JavaScript на стороне сервера.

Помимо Java 6, существует ряд платформ, использующих существующие движки (интерпретаторы) JavaScript для исполнения серверных приложений. (Как правило, речь идёт о повторном использовании движков, ранее созданных для исполнения кода JavaScript в браузерах WWW.)

Платформы исполнения серверных приложений на JavaScript
Название	Используемый движок JavaScript	Языки, на которых написан движок и платформа	Лицензия
Jaxer[67]	SpiderMonkey[68]	C++, C	GPL 3[69]
persevere-framework[70]	Rhino	Java	Модифицированная лицензия BSD[71]
Helma[72]	Rhino	Java, JavaScript	BSD-подобная Helma License 2.0[73]
v8cgi	V8	C++, JavaScript	Лицензия BSD[74]
node.js	V8	C++	Лицензия MIT[75]
gopherjs	Go	Go	Лицензия BSD
JavaScript на стороне сервера используется в проектах Google[76]. Так например, Google Sites допускает подстройку с помощью JavaScript-сценариев, исполняемых движком Rhino[77].

Мобильные приложения
Перевод мобильных устройств Palm на использование Palm webOS в качестве операционной системы с Mojo SDK в качестве комплекта средств разработки[78] позволяет использовать JavaScript в качестве языка разработки мобильных приложений[79][80].

Виджеты
Основная статья: Элемент интерфейса
Виджет — вспомогательная мини-программа, графический модуль которой размещается в рабочем пространстве соответствующей родительской программы[en], служащая для украшения рабочего пространства, развлечения, решения отдельных рабочих задач или быстрого получения информации из интернета без помощи веб-браузера. JavaScript используется как для реализации виджетов, так и для реализации движков виджетов. В частности, при помощи JavaScript реализованы Apple Dashboard, Microsoft Gadgets[en], Yahoo! Widgets[en], Google Gadgets, Klipfolio Dashboard[en].

Прикладное программное обеспечение

Исходный код и скриншот JavaScript-программы, выполняемой с помощью Seed
JavaScript используется для написания прикладного ПО. Например, 16,4 % исходного кода Mozilla Firefox написано на JavaScript.

Google Chrome OS в качестве прикладного ПО использует веб-приложения[81].

В окружении рабочего стола GNOME имеется возможность создавать на JavaScript программы, оперирующие с библиотеками GNOME при помощи Gjs, Seed[en][82].

Манипуляция объектами приложений
JavaScript также находит применение в качестве скриптового языка доступа к объектам приложений. Платформа Mozilla (XUL/Gecko) использует JavaScript. Среди сторонних продуктов, например, Java, начиная с версии 6, содержит встроенный интерпретатор JavaScript на базе Rhino[66]. Сценарии JavaScript поддерживаются в таких приложениях Adobe, как Adobe Photoshop, Adobe Dreamweaver, Adobe Illustrator и Adobe InDesign.

Офисные приложения
JavaScript используется в офисных приложениях для автоматизации рутинных действий, написания макросов, организации доступа со стороны веб-служб.

Microsoft Office
В Excel Services 2010 добавились[83] два новых интерфейса программирования приложений: REST API и JavaScript Object Model (JSOM).

Excel Services 2010 REST API позволяет[84] осуществлять доступ к объектам рабочих книг, таким как таблицы, диаграммы и именованные серии данных; получать изображения, HTML, Atom, рабочие книги; устанавливать значения и обновлять вычисления перед запрашиванием элементов[84].
JSOM даёт возможность реагировать на действия пользователя в отношении Excel Web Access (EWA), программно взаимодействовать с составляющими EWA. Использование JSOM осуществляется при помощи помещения кода JavaScript на страницу, содержащую компоненты EWA[83].
OpenOffice.org
JavaScript — один из языков программирования, используемых для написания макросов в приложениях, входящих в состав OpenOffice.org[85]. В OpenOffice.org интегрирован интерпретатор JavaScript Rhino[86]. По состоянию на декабрь 2009 года поддержка JavaScript носила ограниченный характер. Ограничения, присущие[86] разработке макросов OpenOffice.org на JavaScript:

среда выполнения JavaScript поддерживает загрузку лишь тех классов Java, которые развёрнуты сценарием JavaScript;
среда выполнения JavaScript не предоставляет сообщения об ошибках, произошедших во время выполнения скрипта;
ещё не реализована поддержка интерактивной разработки JavaScript-сценариев.
В OpenOffice.org имеется редактор и отладчик JavaScript-сценариев[87].

Обучение информатике
JavaScript обладает пропедевтической ценностью, позволяя сочетать при обучении информатике интенсивную практику программирования и широту используемых технологий[88]. Преподавание данного языка в школе позволяет создать базу для изучения веб-программирования, использовать на уроках творческие проекты[89]. Соответствующий курс позволяет обеспечить углублённый уровень изучения информатики и его имеет смысл включать в элективные курсы углублённого уровня подготовки[90].

JavaScript — подходящий язык для обучения программированию игр. По сравнению с альтернативами, он функционально достаточен, прост в изучении и в применении, снижает сложность для обучения, мотивирует обучаемых делиться своими играми с другими[91].

Не включённые в книгу Николаса Закаса «Professional JavaScript for Web Developers» части о реализации на JavaScript классических алгоритмов, техник, структур данных, послужили[92] началу проекта Computer science in JavaScript[~ 4].

Версии
JavaScript	Соответствующая версия JScript	Существенные изменения
1.0 (Netscape 2.0, март 1996)	1.0 (ранние версии IE 3.0, август 1996)	Оригинальная версия языка JavaScript.
1.1 (Netscape 3.0, август 1996)	2.0 (поздние версии IE 3.0, январь 1997)	В данной версии был реализован объект Array и устранены наиболее серьёзные ошибки.
1.2 (Netscape 4.0, июнь 1997)		Реализован переключатель switch, регулярные выражения. Практически приведён в соответствии с первой редакцией спецификации ECMA-262.
1.3 (Netscape 4.5, октябрь 1998)	3.0 (IE 4.0, октябрь 1997)	Совместим с первой редакцией ECMA-262.
1.4 (только Netscape Server)	4.0 (Visual Studio 6, нет версии IE)	Применяется только в серверных продуктах Netscape.
5.0 (IE 5.0, март 1999)	
5.1 (IE 5.01)	
1.5 (Netscape 6.0, ноябрь 2000; также
поздние версии Netscape и Mozilla)	5.5 (IE 5.5, июль 2000)	Редакция 3 (декабрь 1999). Совместим с третьей редакцией спецификации ECMA-262.
5.6 (IE 6.0, октябрь 2001)	
1.6 (Gecko 1.8, Firefox 1.5, ноябрь 2005)		Редакция 3 с некоторыми совместимыми улучшениями: E4X, дополнения к Array (например, Array.prototype.forEach), упрощения для Array и String[93]
1.7 (Gecko 1.8.1, Firefox 2.0, осень 2006), расширение JavaScript 1.6		Редакция 3, с добавлением всех улучшений из JavaScript 1.6, генераторов и списочных выражений (англ. list comprehensions, [a*a for (a in iter)]) из Python, блоковых областей с использованием let и деструктурирующего присваивания (var [a, b] = [1, 2])[94].
JScript .NET (ASP.NET; нет версии IE)	(Считается, что JScript .NET разработан при участии других членов ECMA)
1.8 (Gecko 1.9, Firefox 3.0, осень 2008), расширение JavaScript 1.7		Новая форма записи для функций, сходная с типичными лямбда-выражениями, генераторы, новые методы итеративной обработки массивов reduce() и reduceRight()[95].
1.8.1 (Gecko 1.9.1, Firefox 3.5)		Встроенная поддержка JSON, метод getPrototypeOf() у Object, методы trim(), trimLeft(), trimRight() у String[96]
2.0		Редакция 4 (разработка не закончена[97], название зарезервировано ECMA, но не было использовано для публикации[Спецификация 9])
3.0		Редакция 5 (ранее известная под названием ECMAScript 3.1[97]. Финальная версия принята 3 декабря 2009 года[98][99].)
Библиотеки JavaScript
Основная статья: Библиотека JavaScript
Для обеспечения высокого уровня абстракции и достижения приемлемой степени кросс-браузерности, при разработке веб-приложений используются библиотеки JavaScript. Они представляют собой набор многократно используемых объектов и функций. Среди известных JavaScript библиотек можно отметить React.js, Vue.js, Ember.js, Adobe Spry, AngularJS, Svelte[en], Dojo, Extjs, jQuery, Mootools, Prototype, Qooxdoo и Underscore.


Отладка
В JavaScript доступ к отладчикам становится особенно полезным при разработке крупных нетривиальных программ из-за различий в реализациях разных браузеров (в частности, в отношении объектной модели документа). Во многих браузерах есть встроенный отладчик.

Internet Explorer имеет три отладчика: Microsoft Visual Studio — самый полный из них, за ним следует Microsoft Script Editor[en] (компонент Microsoft Office[100]), и, наконец, свободный Microsoft Script Debugger, гораздо более простой, чем два других. Бесплатный Microsoft Visual Web Developer Express предоставляет ограниченную версию с отладочной функцией JavaScript в Microsoft Visual Studio. В восьмой версии в IE вместе с инструментами для разработчиков появился встроенный отладчик.

В Opera также имеется собственный отладчик — Opera Dragonfly[101].

Разрабатываемые веб-приложения в Firefox можно отлаживать при помощи встроенных инструментов Firefox Developer Tools.

В Safari входит отладчик JavaScript WebKit Web Inspector[102]. Этот же отладчик доступен и в других браузерах, использующих WebKit: Google Chrome, Arora, Rekonq, Midori и др.

Средства тестирования
Большинство фреймворков автоматизированного тестирования[en] JavaScript-кода предполагают запуск тестов в браузере. Это осуществляется при помощи HTML-страницы, являющейся контекстом тестирования[en], которая, в свою очередь загружает всё необходимое для осуществления тестирования. Первыми такими фреймворками были JsUnit[en] (создан в 2001 году), Selenium (создан в 2004 году)[103]. Альтернатива — запуск тестов из командной строки. В этом случае используются окружения, отличные от браузера, например, Rhino[104]. Одним из первых инструментов такого рода является Crosscheck, позволяющий тестировать код, эмулируя поведение Internet Explorer 6 и Firefox версий 1.0 и 1.5[105]. Другой пример фреймворка автоматизированного тестирования JavaScript-кода, не использующего браузер для запуска тестов — библиотека env.js, созданная Джоном Резигом. Она использует Rhino и при этом содержит эмуляцию окружения браузера и DOM[106].

Blue Ridge, плагин к фреймворку веб-приложений Ruby on Rails, позволяет осуществлять модульное тестирование JavaScript-кода как в браузере, так и вне его. Это достигается за счёт использования фреймворка автоматизированного тестирования Screw.Unit и Rhino с env.js[107].

Главная проблема систем тестирования, не использующих браузеры, в том, что они используют эмуляции, а не реальные окружения, в которых выполняется код. Это приводит к тому, что успешное прохождение тестов не гарантирует того, что код корректно отработает в браузере[108][109]. Проблемой систем тестирования, использующих браузер, является сложность работы с ними, необходимость осуществления рутинных неавтоматизированных действий[110]. Для решения этого JsTestDriver, фреймворк автоматизированного тестирования, разрабатываемый Google, использует сервер, взаимодействующий с браузерами для осуществления тестирования[111]. Сходным образом ведёт себя Selenium Remote Control, входящий во фреймворк автоматизированного тестирования Selenium: он включает в себя сервер, запускающий и завершающий браузеры и действующий как HTTP-прокси для запросов к ним[112]. Кроме того, в Selenium содержится Selenium Grid, позволяющий осуществлять одновременное тестирование JavaScript-кода на разных компьютерах с разными окружениями, уменьшая время выполнения тестов[113]. Testswarm, имеющее поддержку фреймворков автоматизированного тестирования JavaScript-кода QUnit (библиотека jQuery), UnitTestJS (библиотека Prototype), JSSpec (библиотека MooTools), JsUnit, Selenium и Dojo Objective Harness, представляет собой распределённое средство поддержки непрерывной интеграции[114].

Негативное свойство, которым может обладать фреймворк автоматизированного тестирования JavaScript-кода — наличие зависимостей. Это создаёт риск отказа в работе тестируемого кода, успешно проходящего тесты, в среде с отсутствием этих зависимостей. Например, исходная версия JsUnitTest, фреймворка, созданного и использовавшегося для тестирования библиотеки Prototype, зависела от самой Prototype, изменяющего свойства объектов в глобальной области видимости[115]. Включение в библиотеку JavaScript инструмента тестирования — распространённая практика. Так YUI Test 3 является частью Yahoo! UI Library и может быть безопасно использован для тестирования произвольного JavaScript-кода[116]. QUnit — фреймворк автоматизированного тестирования, созданный разработчиками jQuery[117].

Связь с другими языками
Взаимное влияние
Стандартизация JavaScript потребовала уйти от проблем с торговыми марками, поэтому стандарт ECMA 262 называет язык ECMAScript, три редакции которого были опубликованы с начала работы над ним в ноябре 1996 года.

Objective-J — это строгое компактное надмножество JavaScript, в котором к JavaScript добавлено:

традиционное наследование,
динамическая диспетчеризация методов в стиле Smalltalk/Objective-C,
псевдостатичная типизация.
VBScript от Microsoft, подобно JavaScript, может выполняться на стороне клиента в веб-страницах. VBScript имеет синтаксис, производный от Visual Basic и поддерживается только в Internet Explorer.

JSON, или объектная нотация JavaScript, это формат обмена данными общего назначения, определённый как подмножество JavaScript.

Scheme также является родственным JavaScript языком, поскольку оба представляют богатые возможности функционального программирования: JavaScript является динамическим языком, поддерживает гибкие массивы, может легко симулировать s-выражения, имеет поддержку лямбда-выражений[118].

JavaScript и Java
Общим заблуждением является то, что JavaScript аналогичен или тесно связан с Java, это не так[32]. Оба языка имеют C-подобный синтаксис, являются объектно-ориентированными и, как правило, широко используются в клиентских веб-приложениях. Из важных различий можно отметить:

Java реализует ООП подход, основанный на классах, JavaScript — на прототипах;
Java имеет статическую типизацию, JavaScript — динамическую типизацию;
Java загружается из скомпилированного байт-кода; JavaScript интерпретируется напрямую из файла (но часто с незаметной JIT-компиляцией).
Реализация
На JavaScript реализованы интерпретаторы ряда языков программирования, что позволяет использовать для них как среду выполнения веб-браузер. Им можно найти применение, например, в образовательных целях[119].

HotRuby — свободная реализация виртуальной машины Ruby на JavaScript и Flash. Позволяет выполнять байт-код, полученный в результате компиляции YARV. Реализует большую часть грамматики Ruby. Пока не реализован механизм исключений и большая часть встроенных функций и классов[120]. При помощи HotRuby на веб-страницах можно использовать ruby-скрипты. Для этого ruby-код следует поместить в блок:

<script type="text/ruby"> … </script>
HotRuby выделит его, пошлёт на компиляцию удалённому скрипту и затем отобразит результаты работы на странице[121]. Данная реализация позволяет осуществлять доступ из Ruby к объектам JavaScript[122].

Таблица реализаций языков программирования на JavaScript
Язык	Название реализации	Основные авторы	Лицензия
JavaScript	s-mr[123]	Andrei Formiga	New BSD
PostScript	WPS[124]	Tom Hlavaty	?
PDF
Ассемблер для MOS Technology 6502	6502asm[125]	Stian Soreng	GPL
Objective-J	Cappuccino[126]	Ross Boucher	LGPL
Haskell	ycr2js[127]	Tom Shackell, Neil Mitchell, Andrew Wilkinson, Mike Dodds, Bob Davie, Dimitry Golubovsky	simple permissive license
Prolog	Monash Toy Prolog[128]	Lloyd Allison	?
ioctl[129]	Jan Grant	?
Cat	Cat Interpreter[130]	Christopher Diggins	Общественное достояние
Scheme	BiwaScheme[131]	Yutaka Hara	MIT
BASIC	Quite BASIC[132]	Nikko Strom	бесплатная проприетарная
Lily[en]	Lily[133]	Bill Orcutt	MIT
Forth	wForth[134]	K Jacobson	?
PHP	phype[135]
Python 3	PyPy.js	?	?
Oberon 07	oberonjs[136]	Vlad Folts	MIT
Взаимодействие
В некоторых языках программирования существуют средства поддержки взаимодействия с JavaScript-кодом.

Для PHP имеется пакет HTML Javascript, предоставляющий интерфейс создания простых JavaScript-программ[137].
Соответствующий пакет для Tcl называется ::javascript. Он предоставляет команды генерации кода HTML и JavaScript[138].
Пакет для Perl Data::JavaScript позволяет переносить структуры данных Perl в JavaScript-код[139].
Поддержка браузерами

Информация в этом разделе устарела.
Вы можете помочь проекту, обновив её и убрав после этого данный шаблон.
На сегодняшний день поддержку JavaScript обеспечивают современные версии всех наиболее часто используемых браузеров. В Internet Explorer, Opera, Mozilla Firefox, Safari, Google Chrome, имеется полная поддержка третьей редакции ECMA-262. При этом в Mozilla Firefox предпринята попытка осуществления поддержки четвёртой редакции спецификации, а первым браузером, в котором появилась неполная поддержка спецификации 3.1, явился Internet Explorer 8[140].

Допущенные разработчиками популярных браузеров ошибки в реализации спецификации, как правило, незначительны[141]. По состоянию на ноябрь 2009 года объектная модель документа имеет более ограниченную поддержку[142].

По мнению создателя языка, поддержка в Internet Explorer компанией Microsoft одного из существующих и применяющихся в других браузерах быстрых движков JavaScript способно привести к появлению приложений, работающих с трёхмерной графикой, написанных на JavaScript 3D-игр, использованию JavaScript в задачах, в которых ранее применялась технология Adobe Flash[143].

Наборы тестов
Регрессионное тестирование соответствия браузеров третьей редакции спецификации ECMA-262 может осуществляться[144][145] с помощью разработанного Google инструмента для тестирования соответствия спецификации ECMAScript Sputnik[en], включающего более пяти тысяч вариантов тестирования[146] и получившего название по имени российской команды Google[146], а также написанной Юрием Зайцевым оболочки sputniktests-webrunner[147] или сервиса Google[148]. Варианты тестирования, входящие в Sputnik обновляются в связи с выходом пятой редакции спецификации ECMA-262, отражая изменения по сравнению с её предыдущей редакцией[149].

ECMAScript 5 Conformance Suite[150] представляет собой набор тестов, выпущенный Microsoft под лицензией BSD[151], для проверки соответствия реализации языка ECMAScript его пятой редакции спецификации. По состоянию на 12 марта 2010 года в пакете насчитывалось 1236 вариантов тестирования, он имел версию 0.2 альфа и количество загрузок за три месяца составляло 178[152].

Для проверки корректности реализаций JavaScript имеется набор тестов JavaScript Test Suite, выпущенных Mozilla[153][154].

Безопасность
JavaScript позволяет потенциальным авторам вредоносного кода запускать его на любом компьютере сети: для этого достаточно открыть на нём веб-страницу. Это обуславливает наличие двух принципиальных ограничений:

JavaScript-программы выполняются в песочнице, в которой они могут выполнять только ограниченный круг действий, а не задачи программирования общего назначения (например, создание файлов, работа с сокетами)[155],
для JavaScript-кода применяется правило ограничения домена, в соответствии с которым скрипт, встроенный в страницу, не может получить доступ к ряду свойств объектов другой страницы (в частности, к большинству свойств объекта document) при отличии в протоколе, хосте и номере порта этих страниц[156].
Помимо этого, разработчики браузеров вносят дополнительные ограничения в ответ на имеющие место злоупотребления. Так появился, в частности, запрет на открытие окна, размер одной стороны которого меньше ста пикселей[155].

Межсайтовые уязвимости
Основные статьи: Межсайтовый скриптинг и Подделка межсайтовых запросов
Общая проблема, касающаяся JavaScript — межсайтовый скриптинг или XSS, нарушение правила ограничения домена. Уязвимости XSS имеют место в ситуациях, когда злоумышленник имеет возможность поместить скрипт на страницу, демонстрирующаяся пользователю. В этом случае скрипт получает доступ к сайту с правами этого пользователя, что в ряде случаев открывает возможность отсылки конфиденциальной информации, осуществление нежелательных транзакций.

Уязвимости XSS также происходят из-за ошибок, допущенных разработчиками браузеров[157].

Другим типом межсайтовой уязвимости является подделка межсайтовых запросов или CSRF. Она заключается в возможности сайта злоумышленника заставить браузер пользователя осуществить нежелательное действие на целевом сайте (например, банковский перевод денег). Такая возможность имеется, если целевой сайт полагается только на HTTP cookie или запросы авторизации. В этом случае запросы, инициализированные кодом сайта злоумышленника выполняются так же как запросы пользователя, если он авторизован на целевом сайте. Одним из средств защиты от CSRF является осуществление аутентификации при любом запросе, который приводит к необратимым последствиям. Также может помочь анализ HTTP referer.

Неуместное доверие на стороне клиента
Разработчики клиентских приложений, вне зависимости от того, используют они JavaScript или нет, должны осознавать, что последние могут находиться под контролем злоумышленников. Поэтому любая проверка на стороне клиента может быть обойдена, JavaScript может быть как запущен, так и нет. Код, подвергнувшийся обфускации, может стать объектом обратной разработки; данные формы могут быть посланы на сервер, минуя валидацию, осуществляемую с помощью JavaScript; скрипты могут быть отключены частично, поэтому, например, надёжную защиту от сохранения изображений с помощью JavaScript осуществить нельзя[158]; чрезвычайно неосмотрительно внедрять пароль в JavaScript, исполняемый на клиенте, где он может быть найден злоумышленником.

Ошибки в браузере, плагинах и расширениях
JavaScript предоставляет интерфейс к широкому спектру возможностей браузера, некоторые из которых могут содержать ошибки, приводящие, например, к переполнению буфера. Это позволяет писать скрипты, приводящие к исполнению произвольного кода на пользовательской системе.

Подобные ошибки выявлялись у часто используемых браузеров, включая Mozilla Firefox[159], Internet Explorer[160], Safari[161]. При выявлении потенциально опасных ошибок в браузере и наличия сведений о реализованных эксплойтах фирма-производитель и эксперты по безопасности рекомендуют отключать JavaScript до выхода патча[162][163].

Плагины, такие как плееры, Macromedia Flash и ряд ActiveX компонент, доступных по умолчанию в Internet Explorer, могут также содержать ошибки, эксплуатируемые с помощью JavaScript, что уже случалось ранее[164][165].

Расширения Mozilla Firefox не изолированы друг от друга: одно расширение может исправлять другое, что может использоваться злоумышленниками. На конференции SecurityByte & Owasp AppSec Asia 2009 Роберто Сагги Ливерани (Roberto Suggi Liverani) и Ник Фримэн (Nick Freeman) продемонстрировали три эксплойта в популярных расширениях Firefox, загруженные с сайта более 30 миллионов раз[166].

Ошибки реализации песочницы
Браузеры могут запускать JavaScript вне песочницы с привилегиями, необходимыми, например, для создания и удаления файлов. Однако такие привилегии не должны даваться коду из веба.

Неправильное наделение привилегиями JavaScript из веба служило причиной уязвимостей как Internet Explorer[167], так и Mozilla Firefox[168].

Microsoft Windows позволяет файлам с кодом JavaScript запускаться как обычным программам без того, чтобы быть помещёнными в песочницу. Это делает возможным создание троянских программ[169].

Литература
Фаулер, Мартин. Рефакторинг кода на JavaScript: улучшение проекта существующего кода, 2-е изд. — М.: «Диалектика», 2019. — 464 с. — ISBN 978-5-907144-59-0.
Макфарланд, Дэвид. JavaScript и jQuery: исчерпывающее руководство. — М.: «Диалектика», 2015. — 880 с. — ISBN 978-5-699-79119-4.
Морган, Ник. Javascript для детей. — М., 2016. — 288 с. — ISBN 978-5-00100-295-6.
Дакетт, Джон. Javascript и jQuery. Интерактивная веб-разработка. — М., 2017. — 640 с. — ISBN 978-5-699-80285-2.
Резиг Джон, Бибо Беэр, Марас Иосип. Секреты Javascript ниндзя 2-е изд.. — М.: «Диалектика», 2017. — 544 с. — ISBN 978-5-9908911-8-0.
Никсон Р. Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5. 4-е изд. — СПб.. — М.: «Диалектика», 2016. — 768 с. — ISBN 978-5-496-02146-3.
Флэваrан, Дэвид. JavaScript: карманный справочник, 3-е изд. — М., 2013. — 320 с. — ISBN 978-5-8459-1830-7.
См. также
В родственных проектах

Книги в Викиучебнике

Медиафайлы на Викискладе
CoffeeScript
Библиотека JavaScript
TypeScript
Примечания
↑ Показывать компактно
 Alexei White. Major JavaScript Engines // JavaScript Programmer's Reference. — Indianapolis, IN 46256: Wiley Publishing, Inc., 2009. — P. 12—13. — (Programmer's Reference). — ISBN 978-0-470-34472-9.
 Nicholas C. Zakas. Next-Generation JavaScript Engines // High Performance JavaScript / Editor: Mary E. Treseler. — 1st ed. — 1005 Gravenstein Highway North, Sebastopol, CA 95472: O’Reilly Media, 2010. — P. xiii. — ISBN 978-0-596-80279-0.
 ECMA-262. Архивировано 9 апреля 2022 года. Дата обращения: 10 апреля 2022.
 Dr. Axel Rauschmayer. The Nature of JavaScript // Speaking JavaScript. — First Edition. — O’Reilly Media, 2014. — P. 41. — ISBN 978-1-449-36503-5. Архивная копия от 10 мая 2015 на Wayback Machine
 Hoehrmann B. RFC4329 (англ.) (txt). Рабочая группа сетевых технологий специальной комиссии интернет-разработок (апрель 2006). — Текст рабочего предложения RFC4329. Дата обращения: 28 сентября 2009. Архивировано 22 августа 2011 года.
 18.2.1 Элемент SCRIPT (англ.). Спецификация HTML 4.01. W3C (24 декабря 1999). — Описание элемента Script. Дата обращения: 25 сентября 2009. Архивировано 22 августа 2011 года.
 Miller M., Borins M., Bynens M., Farias B. Updates to ECMAScript Media Types (англ.) — IETF, 2022. — doi:10.17487/RFC9239
 https://web.archive.org/web/20070916144913/http://wp.netscape.com/newsref/pr/newsrelease67.html — 1995.
 ECMAScript Language Specification. Дата обращения: 8 декабря 2009. Архивировано 12 апреля 2015 года.
 Флэнаган Д. JavaScript. Карманный справочник. Сделайте веб-страницы интерактивными! / Перевод А.Г. Сысонюк. — Москва.: Издательский дом "Вильямс", 2015. — С. 320. — 1000 экз. — ISBN 978-5-8459-1948-9 (рус.).
 Д. Рейсиг. 4. Инструменты отладки и тестирования // JavaScript. Профессиональные приёмы программирования = Pro JavaScript™ Techniques / Перевод Н. Вильчинский. — СПб.: Питер, 2008. — С. 76. — (Библиотека программиста). — 2500 экз. — ISBN 978-5-91180-904-1.
 USPTO Copyright entry #75026640. USPTO. Дата обращения: 9 апреля 2020. Архивировано 23 апреля 2012 года.
 History of scripting (англ.). Nombas. Архивировано 2 февраля 2006 года.
 Ford S., Wells D., Wells N. Web Programming Languages (англ.) (1 сентября 1997). Дата обращения: 17 ноября 2009. Архивировано 22 августа 2011 года.
 Zakas, Nicholas History and evolution of Javascript (англ.). Дата обращения: 17 ноября 2009. Архивировано 22 августа 2011 года.
 Noorda, Brent information blitz (англ.) (27 ноября 1995). — Страница, содержащая письмо президента Nombas Брента Ноорда с анонсированием Espresso Pages. Дата обращения: 17 ноября 2009. Архивировано 22 августа 2011 года.
 JavaScript. Библия пользователя = JavaScript. Bible / Денни Гудман (Danny Goodman), Майкл Моррисон (Michael Morrison); пер. с англ. И. В. Василенко. — 5-е изд. — Москва, Санкт-Петербург, Киев: Дилектика, 2006. — С. 3, 26. — 1184 с. — 3000 экз. — ISBN 5-8459-1027-7. Архивная копия от 2 апреля 2015 на Wayback Machine
 Hamilton, Naomi The A-Z of Programming Languages: JavaScript (англ.). a-z of programming languages. ComputerWorld (31 июля 2008). Дата обращения: 18 ноября 2009. Архивировано 22 августа 2011 года.
 Eich, Brendan Popularity (англ.) (3 апреля 2008). Дата обращения: 18 ноября 2009. Архивировано из оригинала 7 апреля 2008 года.
 Frommer, Dan Marc Andreessen Joins Facebook Board (англ.) (30 июня 2008). Дата обращения: 18 ноября 2009. Архивировано 22 августа 2011 года.
 Zakas N. A Short History // Professional JavaScript for Web Developers. — 2nd ed. — USA, Canada: Wiley Publishing, Inc., 2009. — P. 1, 2. — ISBN 978-0-470-22780-0.
 Allen Wirfs-Brock, Brendan Eich. JavaScript: the first 20 years (англ.) // Proceedings of the ACM on Programming Languages // HOPL. — ACM, 2020. — Vol. 4. — P. 1—189. — ISBN 1-58113-329-4.
 Brendan Eich. Popularity (англ.). личный блог (3 апр 2008). Дата обращения: 18 мар 2015. Архивировано 16 марта 2015 года.
 Brendan Eich. New JavaScript Engine Module Owner (англ.). личный блог (21 июн 2011). Дата обращения: 18 мар 2015. Архивировано 21 апреля 2017 года.
 JavaScript. Карманный справочник. Необходимый код и команды = JavaScript. Phrasebook. Essential code and commands / Кристиан Уэнц (Cristian Wenz); пер. с англ. И. В. Берштейн. — Москва, Санкт-Петербург, Киев: ООО "И. Д. Вильямс", 2008. — С. 18. — 272 с. — 2000 экз. — ISBN 978-5-8459-1186-5. Архивная копия от 2 апреля 2015 на Wayback Machine
 Paul Krill. JavaScript creator ponders past, future. Mozilla's Brendan Eich describes JavaScript's history, the upcoming upgrade, and disagreements with Microsoft (англ.). InfoWorld (23 июня 2008). — «Eich: That’s right. It was all within six months from May till December (1995) that it was Mocha and then LiveScript. And then in early December, Netscape and Sun did a license agreement and it became JavaScript.». Дата обращения: 3 мая 2015. Архивировано 20 сентября 2014 года.
 Bellis, Mary The History of JavaScript (англ.). About.com Guide (30 июня 2008). Дата обращения: 18 ноября 2009. Архивировано 22 августа 2011 года.
 Netscape and Sun Announce Javascript(TM), the Open, Cross-Platform Object Scripting Language for Enterprise Networks and the Internet (англ.). Netscape Communications, Sun Microsystems. — Анонс JavaScript. Дата обращения: 17 ноября 2009. Архивировано из оригинала 16 декабря 1996 года.
 Microsoft Announces ActiveX Scripting (англ.). Microsoft (18 июля 1996). — Анонс JScript. Дата обращения: 17 ноября 2009. Архивировано 22 августа 2011 года.
 Silwa C. Scripting standard coming (англ.) // Network World : журнал. — IDG Network World Inc, 1996. — Vol. 13, no. 49. — P. 10. Архивировано 17 мая 2013 года.
 Сибах, Питер Знакомимся с ECMAscript. developerWorks Россия. IBM (13 июня 2007). Дата обращения: 19 ноября 2009. Архивировано 22 августа 2011 года.
 Crockford, Douglas The World's Most Misunderstood Programming Language Has Become the World's Most Popular Programming Language (англ.) (3 марта 2008). Дата обращения: 25 октября 2009. Архивировано 22 августа 2011 года.
 TIOBE Programming Community Index for April 2015 (англ.). TIOBE Software BV (апрель 2015). Дата обращения: 9 мая 2015. Архивировано 4 мая 2009 года.
 Open Source Project Data (англ.). Black Duck Software. Дата обращения: 25 октября 2009. Архивировано 22 августа 2011 года.
 JavaScript and PHP Use Growing in Open Source, Says Black Duck Software (англ.). Black Duck Software (12 августа 2009). Дата обращения: 25 октября 2009. Архивировано 22 августа 2011 года.
 Javascript Usage Statistics (англ.). builtwith.com (29 июля 2010). Дата обращения: 29 июля 2010. Архивировано 22 августа 2011 года.
 Usage of client-side programming languages for websites (англ.). W³Techs (29 июля 2010). Дата обращения: 29 июля 2010. Архивировано 22 августа 2011 года.
 Learning Javascript with Object Graphs. Objects and Prototype Chains. Дата обращения: 10 октября 2016. Архивировано 27 декабря 2016 года.
 Learning Javascript with Object Graphs (Part II). Pure Prototypal Objects. Дата обращения: 10 октября 2016. Архивировано 11 октября 2016 года.
 Learning Javascript with Object Graphs. Visualizing Closures. Дата обращения: 10 октября 2016. Архивировано 27 декабря 2016 года.
 Kris Kowal. CommonJS effort sets JavaScript on path for world domination (англ.) (1 декабря 2009). Дата обращения: 1 декабря 2009. Архивировано 22 августа 2011 года.
 Mikkonen T., Taivalsaari A. Using JavaScript as a Real Programming Language (англ.). — USA: Sun Microsystems Laboratories, 2007. Архивировано 15 июня 2011 года.
 Zakas N. 1. What is JavaScript? // Professional JavaScript for Web Developers. — 2nd ed. — USA, Canada: Wiley Publishing, Inc., 2009. — P. 3. — ISBN 978-0-470-22780-0.
 Zakas, Nicholas Web definitions: DOM, Ajax, and more (англ.). блог Николаса Закаса (29 сентября 2009). — Статья, проясняющая разницу между понятиями, относящимися к веб-разработке, в которой, в частности, обосновывается, почему DOM и BOM наряду с ECMAScript рассматриваются как составные части JavaScript. Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Chapman, Stephen The Browser Object Model. Introduction (англ.). Дата обращения: 1 февраля 2010. Архивировано 22 августа 2011 года.
 Kvk, Raja JavaScript Vs DOM Vs BOM, relationship explained (англ.) (18 декабря 2009). Дата обращения: 18 декабря 2009. Архивировано 22 августа 2011 года.
 Souders S. 1. Understanding AJAX Performance // Even Faster Web Sites: Performance Best Practices for Web Developers. — 1st ed. — USA: O'Reilly Media, 2009. — P. 1—6. — ISBN 0596522304.
 Дэвид Флэнаган. 15.4.6. Независимые от языка DOM-интерфейсы // JavaScript. Подробное руководство = JavaScript. The Definite Guide / Перевод А. Киселева. — 5-е изд. — СПб.: «Символ-Плюс», 2008. — С. 332—334. — ISBN 5-93286-103-7.
 Stockwell, Christian IE8 Performance (англ.) (26 августа 2008). Дата обращения: 6 ноября 2009. Архивировано 22 августа 2011 года.
 Powell T., Schneider F. Chapter 9: JavaScript Object Models // JavaScript 2.0: The Complete Reference. — 2nd ed. — USA: McGraw-Hill/Osborne, 2004. — 976 p. — ISBN 0072253576.
 Chapman, Stephen The Browser Object Model. The Basics (англ.). Дата обращения: 1 февраля 2010. Архивировано 22 августа 2011 года.
 Chapman, Stephen The Browser Object Model (англ.). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Koch P.-P. Chapter 6. BOM // ppk on JavaScript. — 1st ed. — New Riders Press, 2006. — 528 p. — ISBN 0321423305.
 Zakas N. 8. The Browser Object Model // Professional JavaScript for Web Developers. — 2nd ed. — USA, Canada: Wiley Publishing, Inc., 2009. — P. 201—229. — ISBN 978-0-470-22780-0.
 Zakas N. 10. The Document Object Model // Professional JavaScript for Web Developers. — 2nd ed. — USA, Canada: Wiley Publishing, Inc., 2009. — P. 261—317. — ISBN 978-0-470-22780-0.
 4.11.1 The script element (англ.). Спецификация HTML5. W3C (28 октября 2014). Дата обращения: 11 июня 2015. Архивировано 13 июня 2015 года.
 Application Media Types (англ.). Администрация адресного пространства Интернет. — Соответствие типов содержимого MIME-типам. Дата обращения: 28 сентября 2009. Архивировано 22 августа 2011 года.
 Wilson B. MAMA: HEAD structure (англ.). Opera Developer Community. Opera Software (14 ноября 2008). — Статистика используемых элементов в секции head веб-документов. Дата обращения: 14 октября 2009. Архивировано 22 августа 2011 года.
 Перечень атрибутов (англ.). Спецификация HTML 4.01. W3C (24 декабря 1999). — Сводная таблица атрибутов HTML. Дата обращения: 25 сентября 2009. Архивировано 22 августа 2011 года.
 eyeOS Team. 5.2 The JavaScript side and the PHP side // eyeos developer manual. — P. 23. Архивная копия от 7 августа 2008 на Wayback Machine
 Дэвид Флэнаган. 13.4.1. Букмарклеты // JavaScript. Подробное руководство = JavaScript. The Definite Guide / Перевод А. Киселева. — 5-е изд. — СПб.: «Символ-Плюс», 2008. — С. 267. — ISBN 5-93286-103-7.
 User javascript (англ.). Opera tutorial. Opera Software. Дата обращения: 27 ноября 2009. Архивировано 22 августа 2011 года.
 UJS Manager for Opera makes it easy to manage userscripts (англ.) (25 ноября 2009). Дата обращения: 27 ноября 2009. Архивировано 22 августа 2011 года.
 Examples of use. Greasemonkey scripts (англ.). Opera tutorial. Opera Software. Дата обращения: 27 ноября 2009. Архивировано 22 августа 2011 года.
 User Scripts (англ.). The Chromium Projects. Дата обращения: 4 июня 2010. Архивировано 22 августа 2011 года.
 Java™ SE 6 Release Notes (англ.). Sun Microsystems, Inc.. — Анализ исходного кода Mozilla Firefox. Дата обращения: 19 ноября 2009. Архивировано 22 августа 2011 года.
 Create entire apps using JavaScript and Ajax (англ.). Aptana Inc (2009). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Aptana: Jaxer Guide: Introduction (англ.). Aptana Inc. Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Johnson, Ryan Aptana License for Jaxer (англ.). Source code Git repository. Aptana Inc (12 августа 2009). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Persevere helps you rapidly develop data-driven JavaScript-based rich internet applications. (англ.). Persevere (2008). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 kriszyp. License (англ.). Source code SVN repository. Persevere (31 октября 2008). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 helma.org (англ.). Helma.org. Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Helma License version 2.0 (англ.). Helma.org. Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Zara, Ondrej License (англ.). Source code SVN repository (3 сентября 2009). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Dahl, Ryan License (англ.). Source code GIT repository (26 мая 2009). Дата обращения: 13 января 2010. Архивировано 22 августа 2011 года.
 Yegge, Steve Rhino on Rails (англ.) (26 июня 2007). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Yegge, Steve Rhinos and Tigers (англ.) (14 июня 2008). Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Kairer, Ryan Palm Announces the Palm webOS (англ.) (8 января 2009). Дата обращения: 16 октября 2009. Архивировано 22 августа 2011 года.
 Целиков, Дмитрий Анонсировано первое руководство для программирования в среде Palm webOS (18 февраля 2009). Дата обращения: 16 октября 2009. Архивировано из оригинала 16 сентября 2009 года.
 Allen M. Palm webOS. — 1st ed. — O'Reilly Media, 2009. — 464 p. — ISBN 978-0-596-15525-4.
 Sunder Pichai, Linus Upson. Представляем операционную систему Google Chrome. Блог Google Россия (8 июля 2009). Дата обращения: 20 ноября 2009. Архивировано 22 августа 2011 года.
 Winship, Dan JavaScript - GNOME live! (англ.). GNOME. Дата обращения: 28 декабря 2009. Архивировано 22 августа 2011 года.
 Stich, Christian Introducing the JavaScript Object Model for Excel Services in SharePoint 2010 (англ.) (30 ноября 2009). Дата обращения: 1 декабря 2009. Архивировано 22 августа 2011 года.
 Stich, Christian Simple Access to Spreadsheet Data Using the Excel Services 2010 REST API (англ.) (4 ноября 2009). Дата обращения: 1 декабря 2009. Архивировано 22 августа 2011 года.
 Dr Mark Alexander Bain. Accessing the OOo IDE // Learn OpenOffice.org Spreadsheet Macro Programming: OOoBasic and Calc automation / Reviewer: Andrew Pitonyak. — 1st. — Birmingham: Packt Publishing, 2006. — P. 8—11. — (From Technologies to Solutions). — ISBN 1847190979.
 Writing Office Scripts in JavaScript (англ.). OpenOffice.org. Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Writing Macros (англ.). OpenOffice.org. Дата обращения: 22 декабря 2009. Архивировано 22 августа 2011 года.
 Reed D. Rethinking CS0 with JavaScript (англ.) // Technical Symposium on Computer Science Education. Proceedings of the thirty-second SIGCSE technical symposium on Computer Science Education. — Charlotte, North Carolina, United States: ACM, 2001. — P. 100—104. — ISBN 1-58113-329-4.
 Драч А. Н. Повышение педагогического мастерства в области ИКТ-образования в процессе преподавания JavaScript на факультативных занятиях // Информационные технологии в образовании — 2008 : Сборник научных трудов участников VII научно-практической конференции-выставки 30 — 31 октября 2008 г.. — Ростов-на-Дону: Ростиздат, 2008. — С. 63. — ISBN 978-5-7509-0971-1. Архивировано 14 мая 2011 года.
 Босова И.Н. Разработка образовательных программ по информатике на вариативной основе и индивидуальных учебных планов // Информационные технологии в образовании — 2009 : Сборник научных трудов участников IX научно-практической конференции-выставки 29 — 30 октября 2009 г.. — Ростов-на-Дону: Ростиздат, 2009. — С. 25—26. — ISBN 978-5-7509-0971-1. Архивировано 14 мая 2011 года.
 Wu P. Teaching basic game programming using JavaScript (англ.) // Journal of Computing Sciences in Colleges. Papers of the Second Annual CCSC Southwestern Conference. — Consortium for Computing Sciences in Colleges, USA: ACM, 2009. — Vol. 24, iss. 4. — P. 211—220. — ISSN 1937-4771.
 Zakas, Nikolas Computer science in JavaScript: Linked list (англ.). Computer Science (13 апреля 2009). Дата обращения: 12 ноября 2009. Архивировано 22 августа 2011 года.
 New in JavaScript 1.6 (англ.). Mozilla Developer Center. — Новое в JavaScript версии 1.6. Дата обращения: октябрь 2009. Архивировано 22 августа 2011 года.
 New in JavaScript 1.7 (англ.). Mozilla Developer Center. — Новое в JavaScript версии 1.7. Дата обращения: октябрь 2009. Архивировано 22 августа 2011 года.
 New in JavaScript 1.8 (англ.) (недоступная ссылка — история). Mozilla Developer Center. — Новое в JavaScript версии 1.8. Дата обращения: 15 февраля 2010. Архивировано 22 августа 2011 года.
 New in JavaScript 1.8.1 (англ.). Mozilla Developer Center. — Новое в JavaScript версии 1.8.1. Дата обращения: 15 февраля 2010. Архивировано 22 августа 2011 года.
 Final draft of ECMA-262 — the ECMAScript language standard — has been published (англ.). ECMA. — Анонс окончательного варианта проекта пятой редакции ECMA-262. Дата обращения: 25 сентября 2009. Архивировано 22 августа 2011 года.
 Horwat, Waldemar ES5 is an ECMA standard (англ.). Список рассылки Mozilla (4 декабря 2009). — Сообщение об официальном принятии ECMAScript 5 в качестве стандарта ECMA. Дата обращения: 9 декабря 2009. Архивировано 28 июля 2011 года.
 djwm. New version of JavaScript approved (англ.) (7 декабря 2009). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 About the programming environment (англ.). Microsoft Developer Network. Microsoft. Дата обращения: 5 ноября 2009. Архивировано 22 августа 2011 года.
 Opera DragonFly. Opera Software. Дата обращения: 19 декабря 2009. Архивировано 22 августа 2011 года.
 Hatcher, Timothy Introducing Drosera (англ.) (28 июня 2006). Дата обращения: 5 ноября 2009. Архивировано 22 августа 2011 года.
 Christian Johansen. Chapter 1. Automated Testing // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 3. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.1.4. Features of xUnit Test Frameworks. The Test Runner // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 24, 25. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.3.1. Crosscheck // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 28. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.3.2. env.js // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 28, 29. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.3.3. Blue Ridge // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 29. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.3.4. The Issue With Headless Test Runners // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 29. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 C. Titus Brown, Gheorghe Gheorghiu, Jason Huggins. 3.1. A Brief History of Selenium // An Introduction to Testing Web Applications with twill and Selenium. — O'Reilly Media, Inc, 2007. — 60 p.
 Christian Johansen. 3.4. One Test Runner To Rule Them All // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 29. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.4.1. How JsTestDriver Works // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 29. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Selenium Remote-Control (англ.). seleniumhq.org. Дата обращения: 16 марта 2010. Архивировано 22 августа 2011 года.
 Ismayle de Sousa Santos; Pedro de Alcântara dos Santos Neto.: Automação de testes funcionais com o Selenium (порт.) (pdf). Дата обращения: 16 марта 2010. Архивировано 14 марта 2016 года.
 Резиг, Джон TestSwarm (англ.) (25 августа 2009). Дата обращения: 16 марта 2010. Архивировано из оригинала 14 февраля 2010 года.
 Christian Johansen. 3.1.6. Dependencies // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 25. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.2.1. YUI Test // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 26. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Christian Johansen. 3.2.2. Other In-Browser Testing Frameworks // Test Driven JavaScript Development. — Addison-Wesley Professional, 2010. — P. 28. — (Rough Cuts). — ISBN 0-321-68391-9, 978-0-321-68391-5.
 Крокфорд, Дуглас Малыш-программист на JavaScript (англ.). — Статья, раскрывающая связь между JavaScript и Scheme. Дата обращения: 28 сентября 2009. Архивировано 22 августа 2011 года.
 Толксдорф Р. Языки программирования для JavaScript (англ.). is-research (19 июля 2009). — Подборка реализаций языков программирования на JavaScript.. Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 hotruby. Ruby on JavaScript and Flash (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Cooper P. HotRuby: A JavaScript & Flash Virtual Machine That Runs Ruby (англ.). Ruby Inside (26 марта 2008). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Шустер В. HotRuby — Ruby 1.9/YARV opcode interpreter in Javascript (англ.). infoQ (27 марта 2008). — Описание HotRuby.. Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Formiga, Andrei s-mr. Self-made Rhino (англ.). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Hlavaty, Tom WPS: PostScript for the Web (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 6502asm.com — 6502 compatible assembler and emulator in javascript (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Cappuccino Web Framework — Build Desktop Class Applications in Objective-J and JavaScript (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Yhc/Javascript/Brief overview (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Monash Toy Prolog (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 ioctl. Prolog in JavaScript (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Online Cat Interpreter (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 BiwaScheme (англ.). Дата обращения: 29 марта 2018. Архивировано 22 августа 2011 года.
 Strom, Nikko About Quite BASIC (англ.) (2006). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Orcutt, Bill About Lily (англ.). Дата обращения: 12 февраля 2010. Архивировано 22 августа 2011 года.
 Jacobson, Kyle wForth - A JavaScript Forth Interpreter (англ.) (3 декабря 2008). Дата обращения: 12 февраля 2010. Архивировано 22 августа 2011 года.
 phype (англ.). code.google.com. Дата обращения: 12 февраля 2010. Архивировано 22 августа 2011 года.
 Oberon 07 compiler (англ.). Дата обращения: 29 марта 2018. Архивировано 11 июня 2018 года.
 Package Information: HTML_Javascript (англ.). PEAR — PHP Extension and Application Repository. Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 TCLLIB — Tcl Standard Library: javascript (англ.). Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Data::JavaScript (англ.). Comprehensive Perl Archive Network. Дата обращения: 12 октября 2009. Архивировано 22 августа 2011 года.
 Zakas N. ECMAScript Support in Web Browsers // Professional JavaScript for Web Developers. — 2nd ed. — USA, Canada: Wiley Publishing, Inc., 2009. — P. 5, 6. — ISBN 978-0-470-22780-0.
 Web Browser ECMAScript Support (англ.). Дата обращения: 28 октября 2009. Архивировано 22 августа 2011 года.
 Web Browser DOM Support (англ.). Дата обращения: 28 октября 2009. Архивировано 22 августа 2011 года.
 Krill, Paul. Eich: JavaScript getting faster, could displace Flash, InfoWorld (6 ноября 2009). Архивировано 9 ноября 2009 года. Дата обращения: 11 ноября 2009.
 Walden, Jeff Check SpiderMonkey correctness on Sputnik test framework (англ.). Система отслеживания ошибок в продуктах Mozilla Bugzilla (29 июня 2009). — Сообщение об ошибках в SpiderMonkey. Дата обращения: 27 ноября 2009. Архивировано 7 ноября 2011 года.
 Blandy, Jim Integrate Google Sputnik test suite (англ.). Система отслеживания ошибок в продуктах Mozilla Bugzilla (30 июня 2009). — Предложение интеграции Sputnik в инфраструктуру тестирования[en] Mozilla. Дата обращения: 27 ноября 2009. Архивировано 7 ноября 2011 года.
 Hansen, Christian Plesner Launching Sputnik into Orbit (англ.) (29 июня 2009). — Анонс Sputnik, инструмента для тестирования соответствия спецификации ECMAScript реализаций языка. Дата обращения: 27 ноября 2009. Архивировано 22 августа 2011 года.
 Zaytsev, Juriy Sputniktests web runner (англ.) (9 ноября 2009). — Исследование соответствия браузеров спецификации ECMAScript. Дата обращения: 27 ноября 2009. Архивировано из оригинала 13 ноября 2009 года.
 djwm. Google launches runnable test suite for browser ECMAScript/JavaScript (англ.). h-online.com (11 марта 2010). Дата обращения: 12 марта 2010. Архивировано 22 августа 2011 года.
 Taft, Darryl K. How Does IE 8 Behave? (англ.). eWeek (11 марта 2010). — Статья, излагающая результаты исследования инженерами Google, в отношении корректности поддержки браузерами JavaScript, основываясь на тестировании с помощью Sputnik. Дата обращения: 12 марта 2010. Архивировано 22 августа 2011 года.
 allenwb. ECMAScript 5 Conformance Suite (англ.) (1 июля 2009). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Oiaga, Marius Microsoft Releases Tests for the Evolution of JavaScript (англ.) (30 июня 2009). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 allenwb. ECMAScript 5 Conformance Suite. Version 0.2. Download page (англ.) (13 сентября 2009). Дата обращения: 12 марта 2010. Архивировано 22 августа 2011 года.
 Clary, Bob JavaScript Test Suite (англ.) (недоступная ссылка — история) (3 октября 2004). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Begle, Christine JavaScript Test Library (англ.) (недоступная ссылка — история). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Флэнаган Д. 13.8.1. Чего не может JavaScript // JavaScript. Подробное руководство = JavaScript. The Definite Guide / Перевод А. Киселева. — 5-е изд. — СПб.: «Символ-Плюс», 2008. — С. 280, 281. — ISBN 5-93286-103-7.
 Флэнаган Д. 13.8.2. Политика общего происхождения // JavaScript. Подробное руководство = JavaScript. The Definite Guide / Перевод А. Киселева. — 5-е изд. — СПб.: «Символ-Плюс», 2008. — С. 281—283. — ISBN 5-93286-103-7.
 Mozilla Cross-Site Scripting Vulnerability Reported and Fixed (англ.). MozillaZine (28 февраля 2004). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Kottelin, Thor Right-click “protection”? Forget about it (англ.) (недоступная ссылка — история) (17 июня 2008). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Habryn, Mikolaj J. Buffer overflow in crypto.signText() (англ.) (1 марта 2006). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Festa, Paul Buffer-overflow bug in IE (англ.) (19 августа 1998). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files (англ.) (2 марта 2006). Дата обращения: 24 ноября 2009. Архивировано 18 февраля 2010 года.
 Farrell, Nick Turn off Javascript in IE again (англ.) (24 ноября 2009). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Web User. Microsoft issues IE flaw advice (англ.) (24 ноября 2009). Дата обращения: 24 ноября 2009. Архивировано 9 августа 2021 года.
 hdm. Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability (англ.) (17 июля 2006). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Macromedia Flash Activex Buffer Overflow (англ.) (1 марта 2002). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Zero-day vulnerabilities in Firefox extensions discovered (англ.) (20 ноября 2009). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Manion, Art Microsoft Internet Explorer does not properly validate source of redirected frame (англ.) (3 июня 2004). Дата обращения: 24 ноября 2009. Архивировано 30 октября 2009 года.
 Privilege escalation via DOM property overrides (англ.) (2005). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
 Canavan, John JS.Seeker.K (англ.) (1 октября 2003). Дата обращения: 24 ноября 2009. Архивировано 22 августа 2011 года.
Спецификации
 nodejs/node-eps. GitHub. Дата обращения: 5 июля 2018. Архивировано 29 августа 2020 года.
 TC39. 4. Overview // ECMAScript Language Specification. — 5th ed. — 2009. — P. 1, 2. Архивная копия от 12 апреля 2015 на Wayback Machine
 Document Object Model (DOM) Level 3 Core Specification (англ.). W3C (7 апреля 2004). Дата обращения: 6 ноября 2009. Архивировано 22 августа 2011 года.
 HTML5. Draft Standard — 8 December 2009 (англ.). W3C (8 декабря 2009). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 Window Object 1.0 W3C Working Draft 07 April 2006 (англ.). W3C (7 апреля 2006). Дата обращения: 9 декабря 2009. Архивировано 22 августа 2011 года.
 18.2.1 The SCRIPT element. Спецификация HTML 5. W3C (18 декабря 2013). Дата обращения: 18 июня 2013. Архивировано 22 августа 2011 года.
 18.2.3 Intrinsic events (англ.). Спецификация HTML 4.01. W3C (24 декабря 1999). Дата обращения: 15 ноября 2009. Архивировано 22 августа 2011 года.
 4.11.1 The script element (англ.). Спецификация HTML5. W3C (28 октября 2014). Дата обращения: 11 июня 2015. Архивировано 13 июня 2015 года.
 TC39. Introduction // ECMAScript Language Specification. — 5th ed. — 2009. Архивная копия от 12 апреля 2015 на Wayback Machine
Комментарии
 C#, PHP, Perl, Python, Java.
 Имеется в виде отдельной библиотеки JSAN[en].
 Однако это не мешает рассматривать DOM как составную часть языка, приложения или библиотеки. Так например, при описании целей ES-Harmony Брендан Айх оговаривает Архивная копия от 8 августа 2011 на Wayback Machine как одну из целей создания языка, что он должен хорошо подходить для создания библиотек, которые, в том числе, могут включать и DOM.
 Проект 'Computer science in JavaScript' Архивная копия от 17 сентября 2009 на Wayback Machine включает набор классических парадигм, алгоритмов и подходов, написанных на JavaScript и доступных под лицензией MIT.
Ссылки
Документация
Пятая редакция спецификации ECMA-262 (англ.)
Третья редакция спецификации ECMA-262 (англ.)
Mozilla. Документация по JavaScript (рус.)
Справочники
Поддержка ECMAScript браузерами (англ.)
Поддержка DOM браузерами (англ.)
Тематические ресурсы
Крокфорд Д. JavaScript Дугласа Крокфорда (англ.)
Курс лекций по программированию на JavaScript в КПИ (рус.)
Блоги известных авторов книг по JavaScript
Блог Николаса Закаса (англ.)
Блог Джона Резига (англ.)
Блог Стояна Стефанова (англ.)
Блог Дэвида Флэнагана (англ.)
[показать]Перейти к шаблону «JavaScript» 
JavaScript
[показать]Перейти к шаблону «ECMAScript» 
ECMAScript
[показать]Перейти к шаблону «Языки программирования» 
Языки программирования
[показать]Перейти к шаблону «Веб и веб-сайты» 
Веб и веб-сайты
Категории: Языки программирования по алфавитуЯзыки программирования, появившиеся в 1995 годуФорматы файловJavaScriptПоявились в 1995 году в СШАЯзыки с динамической типизациейЯзыки веб-программированияВысокоуровневые языки программированияПрототипно-ориентированные языки программирования
Навигация
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
СтатьяОбсуждение
ЧитатьТекущая версияПравитьПравить кодИстория
Искать в Википедии
Заглавная страница
Содержание
Избранные статьи
Случайная статья
Текущие события
Пожертвовать
Участие
Сообщить об ошибке
Как править статьи
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Медиавики
Викиучебник
Викиновости
Викиверситет
Элемент Викиданных

На других языках
Azərbaycanca
Чӑвашла
English
Suomi
Հայերեն
Монгол
Саха тыла
Српски / srpski
Татарча/tatarça
Ещё 98
Править ссылки
Эта страница в последний раз была отредактирована 25 января 2023 в 13:20.
Текст доступен по лицензии Creative Commons Attribution-ShareAlike; в отдельных случаях могут действовать дополнительные условия. Подробнее см. Условия использования.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации Wikimedia Foundation, Inc.
Политика конфиденциальностиОписание ВикипедииОтказ от ответственностиСвяжитесь с намиМобильная версияРазработчикиСтатистикаЗаявление о кукиWikimedia FoundationPowered by MediaWiki